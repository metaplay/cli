name: Publish public release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # only official release tags

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Tags must be available for GoReleaser, so fetch the full commit history
          show-progress: false # suppress the noisy progress status output

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Fetch tokens from the vault
        id: secrets
        uses: hashicorp/vault-action@v3
        with:
          url: https://vault.int.metaplay.dev:8200
          path: github-actions
          role: ci-read
          method: jwt
          secrets: |
            metaplay/data/ci/metaplaybot-github metaplay_cli_release | METAPLAYBOT_GITHUB_TOKEN;
            metaplay/data/ci/metaplaybot-github chocolatey_api_key | METAPLAYBOT_CHOCO_API_KEY;

      # Remove all the dev release tags as GoReleaser seems to easily trip up on them if the
      # HEAD has a dev tag in addition to the official release tag that we want.
      - name: Remove local pre-release tags
        run: |
          # List tags matching '*-dev*' and delete them locally
          git tag -l '*-dev*' | ForEach-Object { git tag -d $_ }

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          METAPLAYBOT_GITHUB_TOKEN: ${{ steps.secrets.outputs.METAPLAYBOT_GITHUB_TOKEN }}
          METAPLAYBOT_CHOCO_API_KEY: ${{ steps.secrets.outputs.METAPLAYBOT_CHOCO_API_KEY }}
        with:
          distribution: goreleaser
          args: release --clean

      - name: Push Chocolatey artifacts to choco-packages repo
        run: |
          $version = "${{ github.ref_name }}"

          # Clone the choco-packages repository
          git config --global user.name "MetaplayBot"
          git config --global user.email "info@metaplay.io"
          git clone https://MetaplayBot:${{ steps.secrets.outputs.METAPLAYBOT_GITHUB_TOKEN }}@github.com/metaplay/choco-packages.git

          # Create version directory if it doesn't exist
          $targetDir = "choco-packages/metaplay/$version"
          if (-not (Test-Path $targetDir)) {
            New-Item -ItemType Directory -Path $targetDir -Force
          }

          # Copy Chocolatey artifacts to the repo - use specific nupkg pattern to match only Chocolatey packages
          Copy-Item -Path "dist/*.nupkg" -Destination $targetDir -Force

          # Commit and push changes
          cd choco-packages
          git add .
          git commit -m "Add Chocolatey package for metaplay CLI v$version"
          git push
