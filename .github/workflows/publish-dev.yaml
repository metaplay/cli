name: Publish development release

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev

run-name: Publish dev release from ${{ github.head_ref || github.ref_name }}

permissions:
  contents: write

# Only allow running one instance at a time to ensure git tags increment correctly
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  publish-dev:
    runs-on: ubicloud-standard-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Tags must be available for GoReleaser, so fetch the full commit history
          show-progress: false # suppress the noisy progress status output

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Resolve tag for the release. Writes the output into env variables NEXT_DEV_TAG and LATEST_RELEASE_TAG (in GITHUB_ENV).
      - name: Resolve tag for release
        run: python resolve_dev_version.py

      # Note: Not pushing tags due to lots of noise .. can still find versions from CI build history
      - name: Tag the version
        run: git tag ${{ env.NEXT_DEV_TAG }}

      # Dev builds are not published to distribution channels, only available in Github as draft releases
      - name: Run GoReleaser (Development Build)
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ env.NEXT_DEV_TAG }}
          GORELEASER_PREVIOUS_TAG: ${{ env.LATEST_RELEASE_TAG }}
        with:
          distribution: goreleaser
          args: release --config .goreleaser-dev.yaml --clean

      # Clean up old dev builds except the most recent
      - name: Clean up old development releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Wait a bit before deletion to allow active installations to finish..."
          sleep 10

          echo "Deleting old dev releases (keeping only the most recent)..."
          RELEASE_IDS_TO_DELETE=$(gh api repos/${{ github.repository }}/releases --paginate |
            jq '[.[] | select(.prerelease == true)] | sort_by(.created_at) | reverse | .[1:] | .[] | .id')

          if [ -z "$RELEASE_IDS_TO_DELETE" ]; then
            echo "No old dev releases found to delete."
          else
            echo "Attempting to delete the following release IDs:"
            echo "$RELEASE_IDS_TO_DELETE"
            echo "$RELEASE_IDS_TO_DELETE" | xargs -r -I {} sh -c 'gh api repos/${{ github.repository }}/releases/{} -X DELETE && echo "Deleted old dev release {}"' || echo "Failed to delete some or all releases."
          fi
