name: Publish development release

on:
  push:
    branches:
      - main

run-name: Publish dev release from ${{ github.head_ref || github.ref_name }}

permissions:
  contents: write

# Only allow running one instance at a time to ensure git tags increment correctly
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  publish-dev:
    runs-on: ubicloud-standard-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Tags must be available for GoReleaser, so fetch the full commit history
          show-progress: false # suppress the noisy progress status output

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Resolve tag for the release:
      # - If latest release is an official one, bump its patch version by one and suffix with '-dev.1'
      # - If latest release is a development one, increment the '-dev.N' suffix by one
      - name: Resolve tag for release
        run: |
          # Find the latest official release tag matching 'X.Y.Z' format
          latest_official_tag=$(git tag --sort=v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
          if [ -z "$latest_official_tag" ]; then
            echo "Error: Latest official release tag (X.Y.Z) not found!"
            exit 1
          fi
          echo "Latest official release tag: $latest_official_tag"
          echo "LATEST_RELEASE_TAG=$latest_official_tag" >> $GITHUB_ENV

          # Find the latest any release tag matching 'X.Y.Z.*' format
          latest_tag=$(git tag --sort=v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+.*$' | tail -n 1)
          if [ -z "$latest_tag" ]; then
            echo "Error: Latest release tag (official or dev) not found!"
            exit 1
          fi

          # Check if $latest_tag has the '-dev.n' suffix.
          if [[ "$latest_tag" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-dev\.([0-9]+)$ ]]; then
            # This block will likely not be reached due to the grep filter above
            echo "Warning: latest_tag ($latest_tag) unexpectedly contains -dev.n suffix."

            # Bump the '-dev.N' suffix N by 1
            base_version=${BASH_REMATCH[1]}
            dev_num=${BASH_REMATCH[2]}
            next_dev_num=$((dev_num + 1))
            next_dev_tag="${base_version}-dev.${next_dev_num}"
            echo "Computed next dev tag (incrementing dev number): $next_dev_tag"
            echo "NEXT_DEV_TAG=$next_dev_tag" >> $GITHUB_ENV
          else
            # Parse tag using IFS and read
            IFS='.' read -r major minor patch <<< "$latest_tag"

            # Increment patch version and suffix with '-dev.1'
            next_patch=$((patch + 1))
            next_dev_tag="${major}.${minor}.${next_patch}-dev.1"
            echo "Computed next dev tag: $next_dev_tag"
            echo "NEXT_DEV_TAG=$next_dev_tag" >> $GITHUB_ENV
          fi

      - name: Tag the version & push
        run: |
          git tag ${{ env.NEXT_DEV_TAG }}
          git push origin ${{ env.NEXT_DEV_TAG }}

      # Dev builds are not published to distribution channels, only available in Github as draft releases
      - name: Run GoReleaser (Development Build)
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ env.NEXT_DEV_TAG }}
          GORELEASER_PREVIOUS_TAG: ${{ env.LATEST_RELEASE_TAG }}
        with:
          distribution: goreleaser
          args: release --config .goreleaser-dev.yaml --clean

      # Clean up old dev builds except the most recent
      - name: Clean up old development releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Wait a bit before deletion to allow active installations to finish..."
          sleep 10

          echo "Deleting old draft releases (keeping only the most recent)..."
          gh api repos/${{ github.repository }}/releases --paginate |
            jq '[.[] | select(.draft == true)] | sort_by(.created_at) | reverse | .[1:] | .[] | .id' |
            xargs -r -I {} sh -c 'gh api repos/${{ github.repository }}/releases/{} -X DELETE && echo "Deleted old draft release {}"' || echo "No old draft releases (beyond the most recent) to delete or failed to delete some."
