name: Publish development release

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
      - dev

permissions:
  contents: write

jobs:
  build-dev:
    runs-on: ubicloud-standard-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Tags must be available for GoReleaser, so fetch the full commit history
          show-progress: false # suppress the noisy progress status output

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Find latest release tag
        id: latest_tag
        run: |
          latest_tag=$(git tag --sort=v:refname | tail -n 1)
          if [ -n "$latest_tag" ]; then
            echo "Latest release tag found: $latest_tag"
            echo "LATEST_RELEASE_TAG=$latest_tag" >> $GITHUB_ENV
          else
            echo "Latest release tag not found, default to 0.0.0"
            echo "LATEST_RELEASE_TAG=0.0.0" >> $GITHUB_ENV
          fi

      - name: Compute next development tag
        id: next_tag
        run: |
          latest_tag="${{ env.LATEST_RELEASE_TAG }}"

          # Parse tag using IFS and read
          IFS='.' read -r major minor patch <<< "$latest_tag"

          # Increment patch version
          next_patch=$((patch + 1))
          next_version="$major.$minor.$next_patch"

          # Count commits since last tag
          commit_count=$(git rev-list --count ${latest_tag}..HEAD)

          next_dev_tag="${next_version}-dev.${commit_count}"
          echo "Computed next dev tag: $next_dev_tag"
          echo "NEXT_DEV_TAG=$next_dev_tag" >> $GITHUB_ENV

      - name: Tag the version & push
        run: |
          git tag ${{ env.NEXT_DEV_TAG }}
          git push origin ${{ env.NEXT_DEV_TAG }}

      # Dev builds are not published to distribution channels, only available in Github
      - name: Run GoReleaser (Development Build)
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          distribution: goreleaser
          args: release --config .goreleaser-dev.yaml --clean --git-tag ${{ env.NEXT_DEV_TAG }}

      # Clean up old dev builds except the two latest (keep two to avoid deleting versions while someone might be installing them)
      - name: Clean up old development releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deleting old draft releases (keeping the 2 most recent)..."
          gh api repos/${{ github.repository }}/releases --paginate |
            jq '[.[] | select(.draft == true)] | sort_by(.created_at) | reverse | .[2:] | .[] | .id' |
            xargs -r -I {} sh -c 'gh api repos/${{ github.repository }}/releases/{} -X DELETE && echo "Deleted old draft release {}"' || echo "No old draft releases (beyond the 2 most recent) to delete or failed to delete some."
